name: Build and Release

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'docs/**'
      - '.github/workflows/build-release.yml'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check directory structure
        run: |
          echo "当前工作目录: $(pwd)"
          echo "仓库根目录文件列表:"
          ls -la
          echo "docs 目录文件列表:"
          ls -la docs/

      - name: Install dependencies
        run: |
          # 模拟按照依赖环境
          ls

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          pwd
          ls
          # 创建构建目录
          mkdir -p build && mkdir -p dist
          # 模拟构建
          echo "$(date +'%Y-%m-%dT%H:%M:%S%z')" > build/index.html
          # 模拟打包
          cd build && tar -zcvf ../dist/hello.tar.gz *  && cd ..
          # 最终文件夹
          cp -rf build dist/
          ls -al dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: dist/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          # 创建发布目录 release
          mkdir -p release

          # 移动所有构建文件到发布目录
          # 复制 ubuntu 的构建文件（会覆盖重复的文件）
          cp -f artifacts/binaries-ubuntu-latest/* release/ || true

          # 直接使用原始二进制文件，不创建压缩包
          cd release
          
          # 创建版本信息文件
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "$(date +'%Y-%m-%dT%H:%M:%S%z')" > version-dev.txt
          else
            echo "$(date +'%Y-%m-%dT%H:%M:%S%z')" > version.txt
          fi

          echo "文件列表:"
          # 显示文件列表以便调试
          ls -la


      # 如果是 develop 分支，先删除已存在的 dev-latest 标签
      - name: Delete existing dev-latest tag
        if: github.ref == 'refs/heads/develop'
        run: |
          git push origin :refs/tags/dev-latest || true

      # 如果是 main 分支，先删除已存在的 latest 标签
      - name: Delete existing latest tag
        if: github.ref == 'refs/heads/main'
        run: |
          git push origin :refs/tags/latest || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Development Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/develop'
        with:
          files: release/*
          name: "Development Build"
          tag_name: "dev-latest"
          prerelease: true
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

      - name: Create Latest Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/main'
        with:
          files: release/*
          name: "Latest Build"
          tag_name: "latest"
          prerelease: false
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

      # 发布到 gh-pages 分支
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 替换为你构建输出的目录
          publish_dir: ./release
          publish_branch: gh-pages

      # 检出 gh-pages 分支
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages  # 检出到 gh-pages 文件夹

      # 添加 index.html 文件
      - name: Create index.html
        run: |
          echo "<html><body><h1>$(date +'%Y-%m-%dT%H:%M:%S%z')</h1></body></html>" > gh-pages/index.html

      # 提交和推送更改到 gh-pages 分支
      - name: Commit and Push changes
        run: |
          cd gh-pages
          git config --global user.email "${{ secrets.USER_EMAIL }}"
          git config --global user.name "${{ secrets.USER_NAME }}"
          git add index.html
          git commit -m "Update index.html $(date +'%Y-%m-%dT%H:%M:%S%z')"
          git push origin gh-pages